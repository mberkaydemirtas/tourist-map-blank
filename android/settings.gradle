// android/settings.gradle — SAFE & robust includeBuild

pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }

  // --- React Native Gradle Plugin'i node_modules'tan çöz ve include et ---
  def rnPluginPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine(
        "node",
        "--print",
        "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"
      )
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(rnPluginPath)

  // =========================
  // Expo Gradle Plugin (id: "expo")
  // =========================
  // Olası dizin adaylarını sırayla dene:
  def expoPkgJson = providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('expo/package.json')")
  }.standardOutput.asText.get().trim()

  def expoDir = new File(expoPkgJson).getParentFile()
  def expoGradlePluginCandidates = [
    new File(expoDir, "packages/expo-gradle-plugin"), // SDK 52+ yayınlarında sık görülen
    new File(expoDir, "expo-gradle-plugin")          // bazı dağıtımlarda düz kök
  ].collect { it.getCanonicalFile() }

  ext.EXPO_GRADLE_PLUGIN_DIR = expoGradlePluginCandidates.find { it.exists() }
  ext.EXPO_GRADLE_PLUGIN_AVAILABLE = ext.EXPO_GRADLE_PLUGIN_DIR != null
  if (ext.EXPO_GRADLE_PLUGIN_AVAILABLE) {
    includeBuild(ext.EXPO_GRADLE_PLUGIN_DIR.absolutePath)
  }

  // ======================================
  // Expo Autolinking Settings Plugin (id: "expo-autolinking-settings")
  // ======================================
  // expo-modules-autolinking paketinden türetilen olası yollar:
  def autoLinkPkgJson = providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json')")
  }.standardOutput.asText.get().trim()

  def autoLinkDir = new File(autoLinkPkgJson).getParentFile()
  def expoAutolinkingPluginCandidates = [
    new File(autoLinkDir, "../android/expo-gradle-plugin"), // eski yollar
    new File(autoLinkDir, "../expo-gradle-plugin"),         // alternatif
    new File(autoLinkDir, "android/expo-gradle-plugin"),    // paket içi
    new File(autoLinkDir, "expo-gradle-plugin")             // paket kökü
  ].collect { it.getCanonicalFile() }

  ext.EXPO_AUTOLINKING_SETTINGS_DIR = expoAutolinkingPluginCandidates.find { it.exists() }
  ext.EXPO_AUTOLINKING_SETTINGS_AVAILABLE = ext.EXPO_AUTOLINKING_SETTINGS_DIR != null
  if (ext.EXPO_AUTOLINKING_SETTINGS_AVAILABLE) {
    includeBuild(ext.EXPO_AUTOLINKING_SETTINGS_DIR.absolutePath)
  }
}

// RN settings plugin sabit
plugins {
  id("com.facebook.react.settings")
}

// RN tarafı autolinking'i CLI ile tetikle
extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  ex.autolinkLibrariesFromCommand()
}

// Expo Autolinking Settings plugin'i bulunduysa uygula (bulunmazsa sessizce geç)
if (ext.has("EXPO_AUTOLINKING_SETTINGS_AVAILABLE") && ext.EXPO_AUTOLINKING_SETTINGS_AVAILABLE) {
  apply plugin: "expo-autolinking-settings"
} else {
  logger.lifecycle("⚠️ 'expo-autolinking-settings' bulunamadı; Expo modülleri Maven'da aranabilir ve derleme AAR çözümünde düşebilir.")
}

// Repositories — proje depolarını tercih ediyoruz (init.gradle ile kavga etmesin)
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)
  repositories {
    google()
    mavenCentral()
    maven { url "https://www.jitpack.io" }
    // (Kullanıyorsan) Mapbox
    maven {
      url = uri("https://api.mapbox.com/downloads/v2/releases/maven")
      credentials {
        username = "mapbox"
        def tokenProp = providers.gradleProperty("MAPBOX_DOWNLOADS_TOKEN").orNull
        def tokenEnv  = System.getenv("MAPBOX_DOWNLOADS_TOKEN")
        password = tokenProp ?: tokenEnv ?: ""
      }
      authentication { basic(BasicAuthentication) }
    }
  }
}

rootProject.name = "tourist-map-blank"
include(":app")
