// android/settings.gradle — stable includeBuild for RN 0.76 + Expo (AGP 8.x)

pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }

  // ── React Native Gradle Plugin (RN 0.76)
  def rnPluginPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine(
        "node",
        "--print",
        "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"
      )
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(rnPluginPath)

  // ── Expo Gradle Plugin (id: "expo") — birden fazla olası yol
  // 1) expo-modules-autolinking üzerinden (yaygın)
  def autoLinkPkgJson = providers.exec {
    workingDir(rootDir)
    commandLine(
      "node",
      "--print",
      "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })"
    )
  }.standardOutput.asText.get().trim()
  def autoLinkDir = new File(autoLinkPkgJson).getParentFile()

  def expoFromAutoParent = new File(autoLinkDir, "../android/expo-gradle-plugin").getCanonicalFile()
  def expoFromAuto      = new File(autoLinkDir, "android/expo-gradle-plugin").getCanonicalFile()

  // 2) expo paketinin içinden (monorepo veya düz dağıtım)
  def expoPkgJson = providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('expo/package.json')")
  }.standardOutput.asText.get().trim()
  def expoDir = new File(expoPkgJson).getParentFile()

  def expoFromExpoMonorepo = new File(expoDir, "packages/expo-gradle-plugin").getCanonicalFile()
  def expoFromExpoFlat     = new File(expoDir, "expo-gradle-plugin").getCanonicalFile()
  def expoFromExpoAndroid  = new File(expoDir, "android/expo-gradle-plugin").getCanonicalFile()

  def expoCandidates = [
    expoFromAutoParent,
    expoFromAuto,
    expoFromExpoMonorepo,
    expoFromExpoFlat,
    expoFromExpoAndroid
  ]
  def expoPluginDir = expoCandidates.find { it != null && it.exists() }

  if (expoPluginDir != null) {
    includeBuild(expoPluginDir.absolutePath)
    logger.lifecycle("✅ Expo Gradle plugin included from: ${expoPluginDir}")
    settings.ext.set("EXPO_PLUGIN_AVAILABLE", true)
  } else {
    logger.lifecycle("⚠️ Expo Gradle plugin path not found. Continuing without it.")
    settings.ext.set("EXPO_PLUGIN_AVAILABLE", false)
  }
}

// RN settings plugin (gerekli)
plugins {
  id("com.facebook.react.settings")
}

// RN autolinking — RN 0.76’da doğru çağrı bu
extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  ex.autolinkLibrariesFromCommand()
}

// Expo autolinking settings plugin'ini yalnızca bulunduysa uygula
if (settings.ext.has("EXPO_PLUGIN_AVAILABLE") && settings.ext.get("EXPO_PLUGIN_AVAILABLE")) {
  apply plugin: "expo-autolinking-settings"
} else {
  logger.lifecycle("ℹ️ Skipping 'expo-autolinking-settings' (plugin not available).")
}

// Repositories — init.gradle ile kavga etmesin diye projeyi tercih et
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)
  repositories {
    google()
    mavenCentral()
    maven { url "https://www.jitpack.io" }
    // (opsiyonel) Mapbox
    maven {
      url = uri("https://api.mapbox.com/downloads/v2/releases/maven")
      credentials {
        username = "mapbox"
        def tokenProp = providers.gradleProperty("MAPBOX_DOWNLOADS_TOKEN").orNull
        def tokenEnv  = System.getenv("MAPBOX_DOWNLOADS_TOKEN")
        password = tokenProp ?: tokenEnv ?: ""
      }
      authentication { basic(BasicAuthentication) }
    }
  }
}

rootProject.name = "tourist-map-blank"
include(":app")
